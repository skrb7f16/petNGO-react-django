[{"C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\App.js":"1","C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\index.js":"2","C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\Navbar.js":"3","C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\signinForm.js":"4","C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\signupForm.js":"5","C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\donation.js":"6","C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\report.js":"7"},{"size":2037,"mtime":1606898863403,"results":"8","hashOfConfig":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":740,"mtime":1606898192122,"results":"11","hashOfConfig":"9"},{"size":1557,"mtime":1606896871859,"results":"12","hashOfConfig":"9"},{"size":3534,"mtime":1606831487682,"results":"13","hashOfConfig":"9"},{"size":4088,"mtime":1606884302860,"results":"14","hashOfConfig":"9"},{"size":6006,"mtime":1606896830138,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"741ytt",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\App.js",[],"C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\index.js",[],["33","34"],"C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\Navbar.js",[],"C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\signinForm.js",[],"C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\signupForm.js",[],"C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\donation.js",["35"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Card, Accordion } from 'react-bootstrap'\r\n\r\n\r\nfunction Donation(props) {\r\n    return (\r\n        <Card>\r\n            <Card.Header>{props.data.doneOn.split('T')[0]}</Card.Header>\r\n            <Card.Body>\r\n                <blockquote className=\"blockquote mb-0\">\r\n                    <p>\r\n                        {' '}\r\n                            Done a generous donation of Rs.\r\n                            {\" \" + props.data.amount}\r\n                        {' '}\r\n                    </p>\r\n                    <footer className=\"blockquote-footer\">\r\n                        Done at <cite title=\"Source Title\">{props.data.doneOn.split('T')[1].split('.')[0]}</cite>\r\n                    </footer>\r\n                </blockquote>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default function Donations(props) {\r\n    const [amount, setAmount] = useState(0)\r\n    const [data, setData] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (props.isLoggedIn) {\r\n            fetch(props.baseUrl + \"api/user/donations\", {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Token  ${localStorage.getItem('TOKEN')}`\r\n                }\r\n            }).then(res => res.json()).then(response => setData(response))\r\n        }\r\n    },[])\r\n\r\n    function handleDonation(e) {\r\n        e.preventDefault();\r\n        const amountData = {\r\n            \"amount\": amount\r\n        }\r\n        fetch(props.baseUrl + \"api/user/donations\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Token  ${localStorage.getItem('TOKEN')}`\r\n            },\r\n            body: JSON.stringify(amountData)\r\n        }).then(res => res.json()).then(response => {\r\n            alert(response.msg+\" of Rs \"+amount)\r\n            setAmount(0)\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                            Add A Donation\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body >\r\n                            <Form>\r\n                                <Form.Group controlId=\"amount\">\r\n                                    <Form.Label>Donation Amount</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"number\"\r\n                                        placeholder=\"Enter Amount\"\r\n                                        value={amount}\r\n                                        onChange={e => setAmount(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button variant=\"primary\" type=\"submit\" onClick={e => handleDonation(e)}>\r\n                                    Donate\r\n                                </Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                            Your Donations !!!!\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                        <Card.Body >\r\n                            {data.map(e => {\r\n                                return <Donation data={e} key={e.id} />\r\n                            })}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Shashank kumar\\Desktop\\web\\petProject\\frontend\\src\\components\\report.js",["36"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Card, Accordion } from 'react-bootstrap'\r\n\r\n\r\nfunction Report(props) {\r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={\"http://localhost:8000\"+props.data.pic} />\r\n            <Card.Body>\r\n                <Card.Title>{props.data.doneOn.split('T')[0]}{\" \"+props.data.type}</Card.Title>\r\n                <Card.Text>\r\n                    {props.data.report}\r\n                </Card.Text>\r\n                <footer className=\"blockquote-footer\">\r\n                        Done at <cite title=\"Source Title\">{props.data.doneOn.split('T')[1].split('.')[0]}</cite>\r\n                    </footer>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default function Reports(props) {\r\n    const [report, setReport] = useState(\"\")\r\n    const [pic, setPic] = useState(null)\r\n    const [type, setType] = useState('')\r\n    const [breed, setBreed] = useState('')\r\n    const [data, setData] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (props.isLoggedIn) {\r\n            fetch(props.baseUrl + \"api/user/reports\", {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Token  ${localStorage.getItem('TOKEN')}`\r\n                }\r\n            }).then(res => res.json()).then(response => setData(response))\r\n        }\r\n    }, [])\r\n\r\n    async function handleReport(e) {\r\n        e.preventDefault()\r\n        const reportData = new FormData()\r\n        reportData.append(\"report\", report)\r\n        reportData.append(\"pic\", pic, pic.name)\r\n        reportData.append('type', type)\r\n        reportData.append('breed', breed)\r\n        fetch(props.baseUrl + \"api/user/reports\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: `Token  ${localStorage.getItem('TOKEN')}`\r\n            },\r\n            body: reportData\r\n        }).then(res => res.json()).then(response => {\r\n            alert(response.msg)\r\n            // setReport('')\r\n            setBreed('')\r\n            setType('')\r\n            // setPic(null)\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                            Add A Report\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body >\r\n                            <Form>\r\n                                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                    <Form.Label>Enter Your Report</Form.Label>\r\n                                    <Form.Control\r\n                                        as=\"textarea\"\r\n                                        rows={3}\r\n                                        value={report}\r\n                                        onChange={e => setReport(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"type\">\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"e.g. cat,dog\"\r\n                                        value={type}\r\n                                        onChange={e => setType(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                                    <Form.Label>Breed</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"breed\"\r\n                                        value={breed}\r\n                                        onChange={e => setBreed(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.File\r\n                                        id=\"exampleFormControlFile1\"\r\n                                        label=\"Picture if possible\"\r\n                                        onChange={e => {\r\n                                            setPic(e.target.files[0])\r\n\r\n                                        }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button variant=\"primary\" type=\"submit\" onClick={e => handleReport(e)}>\r\n                                    Report\r\n                                </Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                            Your Reports !!!!\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                        <Card.Body className=\"d-flex\">\r\n                            {data.map(e => {\r\n                                if (e.message) {\r\n                                    return <h1 key={1}>e.message</h1>\r\n                                }\r\n                                return <Report data={e} key={e.id} />\r\n                            })}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":44,"column":7,"nodeType":"43","endLine":44,"endColumn":9,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"42","line":43,"column":8,"nodeType":"43","endLine":43,"endColumn":10,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.baseUrl' and 'props.isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["48"],["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},{"desc":"50","fix":"52"},"Update the dependencies array to be: [props.baseUrl, props.isLoggedIn]",{"range":"53","text":"54"},{"range":"55","text":"54"},[1420,1422],"[props.baseUrl, props.isLoggedIn]",[1457,1459]]